name: Smoke dependency upgrades

permissions:
  issues: write

on:
  workflow_dispatch:
  schedule:
    # daily
    - cron: "0 0 * * *"

jobs:
  pixi-update:
    name: Upgrade dependencies and report any failures
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Pixi
        uses: prefix-dev/setup-pixi@8ca4608ef7f4daeb54f5205b20d0b7cb42f11143 # v0.8.14
        with:
          run-install: false
          pixi-version: v0.55.0
          cache: false
          manifest-path: .github/workflows/pixi.toml

      - name: Try upgrading dependencies
        id: upgrade
        working-directory: .github/workflows
        run: |
          set -euo pipefail
          if pixi update --json --no-install 2> failure.txt | pixi exec pixi-diff-to-markdown >> diff.md; then
            echo "upgrade_success=true" >> $GITHUB_ENV
          else
            echo "upgrade_success=false" >> $GITHUB_ENV
            echo "upgrading dependencies failed, captured output in failure.txt"
          fi

      - name: Update tracking issue
        uses: actions/github-script@v7
        env:
          UPGRADE_SUCCESS: ${{ env.upgrade_success }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let bodyContent;
            let codeLang;
            let result;
            if (process.env.UPGRADE_SUCCESS === "true") {
              bodyContent = fs.readFileSync('diff.md', 'utf8');
              codeLang = 'md';
              result = 'success';
            } else {
              bodyContent = fs.readFileSync('failure.txt', 'utf8');
              codeLang = 'txt';
              result = 'failure';
            }

            const issueTitle = "MAINT: dependency upgrade tracker";
            const newBody = `### Dependency upgrade report\n\nResults of latest run at ${new Date().toISOString()}: ${result}\n\n<details>\n\n\`\`\`${codeLang}\n${bodyContent}\n\`\`\`\n\n</details>`;

            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
            });

            let issue = issues.find(i => i.title === issueTitle);

            if (!issue) {
              // Create the issue if it doesn't exist
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: newBody,
              });
              console.log(`Created issue #${newIssue.number}`);
            } else {
              // Update the issue body
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: newBody,
              });
              console.log(`Updated issue #${issue.number} with new body`);

              // Post a comment only if there was a failure
              if (process.env.UPGRADE_SUCCESS !== "true") {
                const commentBody = `⚠️ Warning: upgrade failed for run at ${new Date().toISOString()}. See the updated description for the failure log.`;
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: commentBody,
                });
                console.log(`Added failure comment to issue #${issue.number}`);
              }
            }
